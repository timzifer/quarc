name: "Underfloor Heating"
description: "Fussbodenheizung"
helpers:
  - name: water_viscosity
    arguments: [ T ]
    expression: |
      T <= 0  ? 1.79 :
      T <= 10 ? 1.79 + (1.31 - 1.79) * (T - 0)  / 10 :
      T <= 20 ? 1.31 + (1.00 - 1.31) * (T - 10) / 10 :
      T <= 30 ? 1.00 + (0.80 - 1.00) * (T - 20) / 10 :
      T <= 40 ? 0.80 + (0.66 - 0.80) * (T - 30) / 10 :
      T <= 50 ? 0.66 + (0.55 - 0.66) * (T - 40) / 10 :
      T <= 60 ? 0.55 + (0.48 - 0.55) * (T - 50) / 10 :
      T <= 70 ? 0.48 + (0.42 - 0.48) * (T - 60) / 10 :
      T <= 80 ? 0.42 + (0.37 - 0.42) * (T - 70) / 10 :
      T <= 90 ? 0.37 + (0.33 - 0.37) * (T - 80) / 10 :
      0.33
        

cells:
  - id: raw_flow_sensor_underfloor_heating
    type: number
    unit: counts
  - id: raw_return_underfloor_heating_temperature
    type: number
    unit: "°C"
  - id: flow_sensor_underfloor_heating
    type: number
  - id: return_underfloor_heating_temperature
    type: number
    unit: "°C"
reads:
  - id: analog-in
    endpoint:
      address: "10.42.1.253:502"
      unit_id: 101
      driver: modbus
    function: holding
    start: 53
    length: 7
    ttl: 5s
    signals:
      - cell: raw_return_underfloor_heating_temperature
        offset: 0
        type: number
      - cell: raw_flow_sensor_underfloor_heating
        offset: 6
        type: number
#writes:
#  - id: heater_output
#    cell: heater_command
#    endpoint:
#      address: "192.168.10.20:502"
#      unit_id: 1
#    function: coil
#    address: 5
#    rate_limit: 2s
#    priority: 10
logic:
  - id: convert_return_underfloor_heating_temperature
    target: return_underfloor_heating_temperature
    expression: |
      (value("raw_return_underfloor_heating_temperature") / 1000 - 4) * 9.375 - 25
    valid: |
      error == nil
    quality: "0.9"
  - id: flow_sensor_underfloor_heating
    target: flow_sensor_underfloor_heating
    expression: |
      // === Eingänge ===
      let T = value("return_underfloor_heating_temperature");
      let I = value("raw_flow_sensor_underfloor_heating") / 1000;
      
      // === Viskosität ν(T) in cSt, Wasser (0% PG), linear interpoliert ===
      let nu = water_viscosity(T);
  
  
      // Sensorkonstanten 
      let k = 2.000;
      let a = 0.4;
      let b = 0.4;
      let qmin_offset = 2.5;
      
      // Berechnungen
      let Qmin = nu + qmin_offset;
      let Q    = k * (I - 4) - a * nu + b;
      let acc  = nu < 4 ? 0.03 : 0.04;
      
      Q
    valid: |
      error != nil ? false : (
        let T = value("return_underfloor_heating_temperature");
        let nu = water_viscosity(T);
        (nu < 0.3 || nu > 14) ? false : true
      )
    quality: |
      let T = value("return_underfloor_heating_temperature");
      let nu = water_viscosity(T);
      (nu < 0.3 || nu > 14) ? 0.5 : 1